{% comment %}
  Sección de publicaciones de la comunidad
{% endcomment %}

<div class="gr-community-section" id="gr-community-container">
  <div class="page-width">
    {% if section.settings.title != blank %}
      <h2 class="gr-section-title">{{ section.settings.title }}</h2>
    {% endif %}
    
    {% if section.settings.description != blank %}
      <div class="gr-section-description">{{ section.settings.description }}</div>
    {% endif %}
    
    <div class="gr-community-loading">Cargando publicaciones...</div>
    
    <div class="gr-community-grid" style="display: none;">
      <!-- Las publicaciones se cargarán aquí dinámicamente -->
    </div>
    
    {% if section.settings.show_form %}
      <div class="gr-community-form-container">
        <h3>Comparte tu contenido</h3>
        <form id="gr-community-form" class="gr-community-form">
          <div class="gr-form-field">
            <label for="gr-post-name">Nombre</label>
            <input type="text" id="gr-post-name" name="nombre" required>
          </div>
          
          <div class="gr-form-field">
            <label for="gr-post-title">Título</label>
            <input type="text" id="gr-post-title" name="titulo" required>
          </div>
          
          <div class="gr-form-field">
            <label for="gr-post-content">Contenido</label>
            <textarea id="gr-post-content" name="contenido" rows="4" required></textarea>
          </div>
          
          <div class="gr-form-field">
            <label for="gr-post-image">URL de la imagen (opcional)</label>
            <input type="url" id="gr-post-image" name="imagen_url">
          </div>
          
          <button type="submit" class="gr-submit-button">Publicar</button>
        </form>
      </div>
    {% endif %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const communityContainer = document.getElementById('gr-community-container');
    const loadingElement = communityContainer.querySelector('.gr-community-loading');
    const communityGrid = communityContainer.querySelector('.gr-community-grid');
    const communityForm = document.getElementById('gr-community-form');
    
    // Función para cargar las publicaciones
    const loadPosts = () => {
      if (window.granitoAPI) {
        // Cargar publicaciones desde la API
        window.granitoAPI.getCommunityPosts()
          .then(response => {
            loadingElement.style.display = 'none';
            
            if (response.error) {
              communityGrid.innerHTML = '<p>Error al cargar las publicaciones.</p>';
              communityGrid.style.display = 'block';
              return;
            }
            
            if (response.length === 0) {
              communityGrid.innerHTML = '<p>No hay publicaciones disponibles.</p>';
              communityGrid.style.display = 'block';
              return;
            }
            
            // Ordenar publicaciones por fecha (más recientes primero)
            const posts = response.sort((a, b) => {
              return new Date(b.fecha) - new Date(a.fecha);
            });
            
            // Crear HTML para cada publicación
            let postsHTML = '';
            
            posts.forEach(post => {
              const date = new Date(post.fecha);
              const formattedDate = date.toLocaleDateString('es-ES', {
                day: '2-digit',
                month: 'long',
                year: 'numeric'
              });
              
              postsHTML += `
                <div class="gr-community-post" data-post-id="${post.id}">
                  <div class="gr-post-header">
                    <div class="gr-post-author">${post.nombre}</div>
                    <div class="gr-post-date">${formattedDate}</div>
                  </div>
                  
                  <h3 class="gr-post-title">${post.titulo}</h3>
                  
                  ${post.imagen_url ? `
                    <div class="gr-post-image">
                      <img src="${post.imagen_url}" alt="${post.titulo}" loading="lazy">
                    </div>
                  ` : ''}
                  
                  <div class="gr-post-content">${post.contenido}</div>
                  
                  <div class="gr-post-actions">
                    <button class="gr-like-button" data-post-id="${post.id}">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                      </svg>
                      <span class="gr-like-count">${post.likes || 0}</span>
                    </button>
                    
                    <button class="gr-comment-button" data-post-id="${post.id}">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>
                      </svg>
                      <span class="gr-comment-count">${post.comentarios ? post.comentarios.length : 0}</span>
                    </button>
                  </div>
                  
                  <div class="gr-post-comments" style="display: none;">
                    ${post.comentarios && post.comentarios.length > 0 ? `
                      <div class="gr-comments-list">
                        ${post.comentarios.map(comment => `
                          <div class="gr-comment">
                            <div class="gr-comment-author">${comment.nombre}</div>
                            <div class="gr-comment-content">${comment.comentario}</div>
                            <div class="gr-comment-date">${new Date(comment.fecha).toLocaleDateString('es-ES')}</div>
                          </div>
                        `).join('')}
                      </div>
                    ` : '<p>No hay comentarios todavía.</p>'}
                    
                    <form class="gr-comment-form" data-post-id="${post.id}">
                      <div class="gr-form-field">
                        <label for="gr-comment-name-${post.id}">Nombre</label>
                        <input type="text" id="gr-comment-name-${post.id}" name="nombre" required>
                      </div>
                      
                      <div class="gr-form-field">
                        <label for="gr-comment-content-${post.id}">Comentario</label>
                        <textarea id="gr-comment-content-${post.id}" name="comentario" rows="2" required></textarea>
                      </div>
                      
                      <button type="submit" class="gr-submit-button">Comentar</button>
                    </form>
                  </div>
                </div>
              `;
            });
            
            communityGrid.innerHTML = postsHTML;
            communityGrid.style.display = 'block';
            
            // Añadir event listeners para los botones de like y comentarios
            const likeButtons = communityGrid.querySelectorAll('.gr-like-button');
            const commentButtons = communityGrid.querySelectorAll('.gr-comment-button');
            const commentForms = communityGrid.querySelectorAll('.gr-comment-form');
            
            likeButtons.forEach(button => {
              button.addEventListener('click', function() {
                const postId = this.dataset.postId;
                
                if (window.granitoAPI) {
                  window.granitoAPI.likeCommunityPost(postId)
                    .then(response => {
                      if (!response.error) {
                        const likeCount = this.querySelector('.gr-like-count');
                        likeCount.textContent = parseInt(likeCount.textContent) + 1;
                      }
                    })
                    .catch(error => {
                      console.error('Error al dar like:', error);
                    });
                }
              });
            });
            
            commentButtons.forEach(button => {
              button.addEventListener('click', function() {
                const postId = this.dataset.postId;
                const commentsSection = document.querySelector(`.gr-post[data-post-id="${postId}"] .gr-post-comments`);
                
                if (commentsSection.style.display === 'none') {
                  commentsSection.style.display = 'block';
                } else {
                  commentsSection.style.display = 'none';
                }
              });
            });
            
            commentForms.forEach(form => {
              form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const postId = this.dataset.postId;
                const nameInput = this.querySelector('input[name="nombre"]');
                const commentInput = this.querySelector('textarea[name="comentario"]');
                
                if (window.granitoAPI) {
                  window.granitoAPI.commentOnCommunityPost(postId, {
                    nombre: nameInput.value,
                    comentario: commentInput.value
                  })
                    .then(response => {
                      if (!response.error) {
                        // Recargar las publicaciones para mostrar el nuevo comentario
                        loadPosts();
                      }
                    })
                    .catch(error => {
                      console.error('Error al comentar:', error);
                    });
                }
              });
            });
          })
          .catch(error => {
            console.error('Error al cargar publicaciones:', error);
            loadingElement.textContent = 'Error al cargar las publicaciones.';
          });
      } else {
        // Si la API no está disponible, mostrar publicaciones estáticas de ejemplo
        loadingElement.style.display = 'none';
        
        // Datos de ejemplo
        const examplePosts = [
          {
            id: '1',
            nombre: 'Carlos Rodríguez',
            titulo: 'Mi nuevo setup',
            contenido: 'Acabo de montar mi nueva tabla con ejes Thunder y ruedas Spitfire. ¡Rueda increíble!',
            imagen_url: '/placeholder.svg?height=400&width=600',
            fecha: '2023-06-15T10:30:00',
            likes: 12,
            comentarios: [
              {
                nombre: 'Laura Gómez',
                comentario: '¡Qué buena pinta! ¿Qué tal van los ejes Thunder?',
                fecha: '2023-06-15T11:45:00'
              },
              {
                nombre: 'Miguel Sánchez',
                comentario: 'Yo tengo los mismos, son una pasada.',
                fecha: '2023-06-15T14:20:00'
              }
            ]
          },
          {
            id: '2',
            nombre: 'Ana Martínez',
            titulo: 'Sesión en el skatepark de la ciudad',
            contenido: 'Ayer estuvimos patinando en el nuevo skatepark. Las rampas están geniales y hay mucho espacio para practicar.',
            imagen_url: '/placeholder.svg?height=400&width=600',
            fecha: '2023-06-10T16:45:00',
            likes: 8,
            comentarios: []
          }
        ];
        
        // Crear HTML para cada publicación
        let postsHTML = '';
        
        examplePosts.forEach(post => {
          const date = new Date(post.fecha);
          const formattedDate = date.toLocaleDateString('es-ES', {
            day: '2-digit',
            month: 'long',
            year: 'numeric'
          });
          
          postsHTML += `
            <div class="gr-community-post" data-post-id="${post.id}">
              <div class="gr-post-header">
                <div class="gr-post-author">${post.nombre}</div>
                <div class="gr-post-date">${formattedDate}</div>
              </div>
              
              <h3 class="gr-post-title">${post.titulo}</h3>
              
              ${post.imagen_url ? `
                <div class="gr-post-image">
                  <img src="${post.imagen_url}" alt="${post.titulo}" loading="lazy">
                </div>
              ` : ''}
              
              <div class="gr-post-content">${post.contenido}</div>
              
              <div class="gr-post-actions">
                <button class="gr-like-button" data-post-id="${post.id}">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                  </svg>
                  <span class="gr-like-count">${post.likes || 0}</span>
                </button>
                
                <button class="gr-comment-button" data-post-id="${post.id}">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>
                  </svg>
                  <span class="gr-comment-count">${post.comentarios ? post.comentarios.length : 0}</span>
                </button>
              </div>
              
              <div class="gr-post-comments" style="display: none;">
                ${post.comentarios && post.comentarios.length > 0 ? `
                  <div class="gr-comments-list">
                    ${post.comentarios.map(comment => `
                      <div class="gr-comment">
                        <div class="gr-comment-author">${comment.nombre}</div>
                        <div class="gr-comment-content">${comment.comentario}</div>
                        <div class="gr-comment-date">${new Date(comment.fecha).toLocaleDateString('es-ES')}</div>
                      </div>
                    `).join('')}
                  </div>
                ` : '<p>No hay comentarios todavía.</p>'}
                
                <form class="gr-comment-form" data-post-id="${post.id}">
                  <div class="gr-form-field">
                    <label for="gr-comment-name-${post.id}">Nombre</label>
                    <input type="text" id="gr-comment-name-${post.id}" name="nombre" required>
                  </div>
                  
                  <div class="gr-form-field">
                    <label for="gr-comment-content-${post.id}">Comentario</label>
                    <textarea id="gr-comment-content-${post.id}" name="comentario" rows="2" required></textarea>
                  </div>
                  
                  <button type="submit" class="gr-submit-button">Comentar</button>
                </form>
              </div>
            </div>
          `;
        });
        
        communityGrid.innerHTML = postsHTML;
        communityGrid.style.display = 'block';
        
        // Añadir event listeners para los botones de like y comentarios
        const likeButtons = communityGrid.querySelectorAll('.gr-like-button');
        const commentButtons = communityGrid.querySelectorAll('.gr-comment-button');
        
        likeButtons.forEach(button => {
          button.addEventListener('click', function() {
            const likeCount = this.querySelector('.gr-like-count');
            likeCount.textContent = parseInt(likeCount.textContent) + 1;
          });
        });
        
        commentButtons.forEach(button => {
          button.addEventListener('click', function() {
            const postId = this.dataset.postId;
            const commentsSection = document.querySelector(`.gr-community-post[data-post-id="${postId}"] .gr-post-comments`);
            
            if (commentsSection.style.display === 'none') {
              commentsSection.style.display = 'block';
            } else {
              commentsSection.style.display = 'none';
            }
          });
        });
      }
    };
    
    // Manejar envío del formulario de publicación
    if (communityForm) {
      communityForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(communityForm);
        const postData = {
          nombre: formData.get('nombre'),
          titulo: formData.get('titulo'),
          contenido: formData.get('contenido'),
          imagen_url: formData.get('imagen_url') || null
        };
        
        if (window.granitoAPI) {
          window.granitoAPI.createCommunityPost(postData)
            .then(response => {
              if (response.error) {
                alert('Error al crear la publicación. Por favor, inténtalo de nuevo.');
                return;
              }
              
              alert('¡Publicación creada con éxito!');
              communityForm.reset();
              
              // Recargar las publicaciones para mostrar la nueva
              loadPosts();
            })
            .catch(error => {
              console.error('Error al crear publicación:', error);
              alert('Error al crear la publicación. Por favor, inténtalo de nuevo.');
            });
        } else {
          alert('¡Publicación creada con éxito! (Modo de demostración)');
          communityForm.reset();
          
          // Simular una nueva publicación
          const newPost = {
            id: '3',
            nombre: postData.nombre,
            titulo: postData.titulo,
            contenido: postData.contenido,
            imagen_url: postData.imagen_url,
            fecha: new Date().toISOString(),
            likes: 0,
            comentarios: []
          };
          
          // Añadir la nueva publicación al principio del grid
          const postHTML = `
            <div class="gr-community-post" data-post-id="${newPost.id}">
              <div class="gr-post-header">
                <div class="gr-post-author">${newPost.nombre}</div>
                <div class="gr-post-date">${new Date().toLocaleDateString('es-ES', {
                  day: '2-digit',
                  month: 'long',
                  year: 'numeric'
                })}</div>
              </div>
              
              <h3 class="gr-post-title">${newPost.titulo}</h3>
              
              ${newPost.imagen_url ? `
                <div class="gr-post-image">
                  <img src="${newPost.imagen_url}" alt="${newPost.titulo}" loading="lazy">
                </div>
              ` : ''}
              
              <div class="gr-post-content">${newPost.contenido}</div>
              
              <div class="gr-post-actions">
                <button class="gr-like-button" data-post-id="${newPost.id}">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                  </svg>
                  <span class="gr-like-count">0</span>
                </button>
                
                <button class="gr-comment-button" data-post-id="${newPost.id}">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>
                  </svg>
                  <span class="gr-comment-count">0</span>
                </button>
              </div>
              
              <div class="gr-post-comments" style="display: none;">
                <p>No hay comentarios todavía.</p>
                
                <form class="gr-comment-form" data-post-id="${newPost.id}">
                  <div class="gr-form-field">
                    <label for="gr-comment-name-${newPost.id}">Nombre</label>
                    <input type="text" id="gr-comment-name-${newPost.id}" name="nombre" required>
                  </div>
                  
                  <div class="gr-form-field">
                    <label for="gr-comment-content-${newPost.id}">Comentario</label>
                    <textarea id="gr-comment-content-${newPost.id}" name="comentario" rows="2" required></textarea>
                  </div>
                  
                  <button type="submit" class="gr-submit-button">Comentar</button>
                </form>
              </div>
            </div>
          `;
          
          communityGrid.insertAdjacentHTML('afterbegin', postHTML);
        }
      });
    }
    
    // Cargar publicaciones
    loadPosts();
  });
</script>

<style>
  .gr-community-section {
    margin: 40px 0;
  }
  
  .gr-section-title {
    text-align: center;
    margin-bottom: 10px;
    color: {{ settings.gr_color_principal }};
  }
  
  .gr-section-description {
    text-align: center;
    margin-bottom: 30px;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .gr-community-loading {
    text-align: center;
    padding: 20px;
  }
  
  .gr-community-grid {
    display: flex;
    flex-direction: column;
    gap: 30px;
    margin-bottom: 40px;
  }
  
  .gr-community-post {
    border: 1px solid #e5e5e5;
    border-radius: 8px;
    overflow: hidden;
    background-color: white;
  }
  
  .gr-post-header {
    display: flex;
    justify-content: space-between;
    padding: 15px;
    border-bottom: 1px solid #e5e5e5;
    background-color: #f9f9f9;
  }
  
  .gr-post-author {
    font-weight: bold;
  }
  
  .gr-post-date {
    color: #777;
    font-size: 0.9em;
  }
  
  .gr-post-title {
    padding: 15px 15px 0;
    margin: 0;
    color: {{ settings.gr_color_principal }};
  }
  
  .gr-post-image {
    padding: 15px;
  }
  
  .gr-post-image img {
    width: 100%;
    height: auto;
    border-radius: 4px;
  }
  
  .gr-post-content {
    padding: 0 15px 15px;
    white-space: pre-line;
  }
  
  .gr-post-actions {
    display: flex;
    padding: 0 15px 15px;
    gap: 15px;
  }
  
  .gr-like-button,
  .gr-comment-button {
    display: flex;
    align-items: center;
    gap: 5px;
    background: none;
    border: none;
    color: #777;
    cursor: pointer;
    transition: color 0.2s ease;
    padding: 5px 0;
  }
  
  .gr-like-button:hover,
  .gr-comment-button:hover {
    color: {{ settings.gr_color_principal }};
  }
  
  .gr-post-comments {
    padding: 15px;
    border-top: 1px solid #e5e5e5;
    background-color: #f9f9f9;
  }
  
  .gr-comments-list {
    margin-bottom: 20px;
  }
  
  .gr-comment {
    padding: 10px;
    border-bottom: 1px solid #e5e5e5;
  }
  
  .gr-comment:last-child {
    border-bottom: none;
  }
  
  .gr-comment-author {
    font-weight: bold;
    margin-bottom: 5px;
  }
  
  .gr-comment-content {
    margin-bottom: 5px;
  }
  
  .gr-comment-date {
    font-size: 0.8em;
    color: #777;
    text-align: right;
  }
  
  .gr-community-form-container {
    margin-top: 40px;
    padding: 20px;
    border: 1px solid #e5e5e5;
    border-radius: 8px;
    background-color: #f9f9f9;
  }
  
  .gr-community-form-container h3 {
    margin-top: 0;
    margin-bottom: 20px;
    color: {{ settings.gr_color_principal }};
  }
  
  .gr-form-field {
    margin-bottom: 15px;
  }
  
  .gr-form-field label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
  }
  
  .gr-form-field input,
  .gr-form-field textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #e5e5e5;
    border-radius: 4px;
  }
  
  .gr-submit-button {
    background-color: {{ settings.gr_color_principal }};
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .gr-submit-button:hover {
    background-color: {{ settings.gr_color_secundario }};
  }
</style>

{% schema %}
{
  "name": "GR Comunidad",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Título",
      "default": "Comunidad"
    },
    {
      "type": "textarea",
      "id": "description",
      "label": "Descripción",
      "default": "Comparte tus experiencias y conecta con otros skaters"
    },
    {
      "type": "checkbox",
      "id": "show_form",
      "label": "Mostrar formulario de publicación",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "GR Comunidad"
    }
  ]
}
{% endschema %}
