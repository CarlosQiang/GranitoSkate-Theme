{% comment %}
  Sección de estadísticas de productos
{% endcomment %}

<div class="gr-product-stats-section" id="gr-product-stats-container" data-product-id="{{ product.id }}">
  <div class="page-width">
    {% if section.settings.title != blank %}
      <h2 class="gr-section-title">{{ section.settings.title }}</h2>
    {% endif %}
    
    <div class="gr-stats-loading">Cargando estadísticas...</div>
    
    <div class="gr-stats-content" style="display: none;">
      <div class="gr-stats-grid">
        <div class="gr-stat-card">
          <div class="gr-stat-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
          </div>
          <div class="gr-stat-value" id="gr-stat-views">0</div>
          <div class="gr-stat-label">Visitas</div>
        </div>
        
        <div class="gr-stat-card">
          <div class="gr-stat-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path></svg>
          </div>
          <div class="gr-stat-value" id="gr-stat-wishlist">0</div>
          <div class="gr-stat-label">En favoritos</div>
        </div>
        
        <div class="gr-stat-card">
          <div class="gr-stat-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path></svg>
          </div>
          <div class="gr-stat-value" id="gr-stat-reviews">0</div>
          <div class="gr-stat-label">Reseñas</div>
        </div>
        
        <div class="gr-stat-card">
          <div class="gr-stat-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="9" cy="21" r="1"></circle><circle cx="20" cy="21" r="1"></circle><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path></svg>
          </div>
          <div class="gr-stat-value" id="gr-stat-purchases">0</div>
          <div class="gr-stat-label">Compras</div>
        </div>
      </div>
      
      {% if section.settings.show_chart %}
        <div class="gr-stats-chart-container">
          <h3>Visitas en los últimos 30 días</h3>
          <canvas id="gr-stats-chart"></canvas>
        </div>
      {% endif %}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    if (window.granitoAPI) {
      const statsContainer = document.getElementById('gr-product-stats-container');
      const productId = statsContainer.dataset.productId;
      const loadingElement = statsContainer.querySelector('.gr-stats-loading');
      const contentElement = statsContainer.querySelector('.gr-stats-content');
      
      // Obtener fecha de hace 30 días
      const endDate = new Date().toISOString().split('T')[0];
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - 30);
      const startDateStr = startDate.toISOString().split('T')[0];
      
      window.granitoAPI.getStats(productId, startDateStr, endDate)
        .then(response => {
          loadingElement.style.display = 'none';
          contentElement.style.display = 'block';
          
          if (response.error) {
            console.error('Error al cargar estadísticas:', response.error);
            return;
          }
          
          // Actualizar valores de estadísticas
          document.getElementById('gr-stat-views').textContent = response.visitas || 0;
          document.getElementById('gr-stat-wishlist').textContent = response.favoritos || 0;
          document.getElementById('gr-stat-reviews').textContent = response.resenas || 0;
          document.getElementById('gr-stat-purchases').textContent = response.compras || 0;
          
          // Si hay datos diarios y existe el canvas, crear gráfico
          if (response.datos_diarios && document.getElementById('gr-stats-chart')) {
            createStatsChart(response.datos_diarios);
          }
        });
      
      // Función para crear el gráfico
      function createStatsChart(dailyData) {
        const ctx = document.getElementById('gr-stats-chart').getContext('2d');
        
        // Preparar datos para el gráfico
        const labels = [];
        const data = [];
        
        // Ordenar datos por fecha
        const sortedData = Object.entries(dailyData).sort(([dateA], [dateB]) => {
          return new Date(dateA) - new Date(dateB);
        });
        
        // Extraer fechas y valores
        sortedData.forEach(([date, value]) => {
          // Formatear fecha para mostrar solo día y mes
          const formattedDate = new Date(date).toLocaleDateString(undefined, { day: 'numeric', month: 'short' });
          labels.push(formattedDate);
          data.push(value);
        });
        
        // Crear gráfico
        new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [{
              label: 'Visitas',
              data: data,
              borderColor: '{{ settings.gr_color_principal }}',
              backgroundColor: 'rgba({{ settings.gr_color_principal | color_to_rgb }}, 0.1)',
              borderWidth: 2,
              tension: 0.4,
              fill: true
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  precision: 0
                }
              }
            }
          }
        });
      }
    }
  });
</script>

<style>
  .gr-product-stats-section {
    margin: 40px 0;
  }
  
  .gr-section-title {
    text-align: center;
    margin-bottom: 30px;
  }
  
  .gr-stats-loading {
    text-align: center;
    padding: 20px;
  }
  
  .gr-stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin-bottom: 30px;
  }
  
  @media screen and (min-width: 750px) {
    .gr-stats-grid {
      grid-template-columns: repeat(4, 1fr);
    }
  }
  
  .gr-stat-card {
    border: 1px solid #e5e5e5;
    border-radius: 8px;
    padding: 20px;
    text-align: center;
  }
  
  .gr-stat-icon {
    margin-bottom: 10px;
  }
  
  .gr-stat-icon svg {
    width: 30px;
    height: 30px;
    stroke: {{ settings.gr_color_principal }};
  }
  
  .gr-stat-value {
    font-size: 2em;
    font-weight: bold;
    margin-bottom: 5px;
    color: {{ settings.gr_color_principal }};
  }
  
  .gr-stat-label {
    color: #777;
  }
  
  .gr-stats-chart-container {
    margin-top: 30px;
    border: 1px solid #e5e5e5;
    border-radius: 8px;
    padding: 20px;
  }
  
  .gr-stats-chart-container h3 {
    text-align: center;
    margin-bottom: 20px;
  }
  
  #gr-stats-chart {
    height: 300px;
  }
</style>

{% schema %}
{
  "name": "GR Estadísticas",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Título de la sección",
      "default": "Estadísticas del producto"
    },
    {
      "type": "checkbox",
      "id": "show_chart",
      "label": "Mostrar gráfico de visitas",
      "default": true
    }
  ],
  "presets": [
    {
      "name": "GR Estadísticas"
    }
  ]
}
{% endschema %}
