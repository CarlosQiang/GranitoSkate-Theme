{% comment %}
  Carrito lateral personalizado para GranitoSkate
{% endcomment %}

<div class="gr-cart" id="gr-cart-container">
  <div class="gr-cart-header">
    <h2 class="gr-cart-title">{{ section.settings.cart_title }}</h2>
    <button class="gr-cart-close" aria-label="Cerrar carrito">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>
  
  <div class="gr-cart-content">
    <div class="gr-cart-empty" {% if cart.item_count > 0 %}style="display: none;"{% endif %}>
      <div class="gr-cart-empty-icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="9" cy="21" r="1"></circle>
          <circle cx="20" cy="21" r="1"></circle>
          <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
        </svg>
      </div>
      <p class="gr-cart-empty-text">{{ section.settings.empty_text }}</p>
      <a href="{{ section.settings.continue_url }}" class="gr-button">{{ section.settings.continue_text }}</a>
    </div>
    
    <div class="gr-cart-items" {% if cart.item_count == 0 %}style="display: none;"{% endif %}>
      {% for item in cart.items %}
        <div class="gr-cart-item" data-cart-item="{{ item.key }}">
          <div class="gr-cart-item-image">
            <a href="{{ item.url }}">
              <img src="{{ item.image | img_url: '120x120', crop: 'center' }}" alt="{{ item.title | escape }}">
            </a>
          </div>
          
          <div class="gr-cart-item-details">
            <h3 class="gr-cart-item-title">
              <a href="{{ item.url }}">{{ item.product.title }}</a>
            </h3>
            
            {% if item.product.has_only_default_variant == false %}
              <p class="gr-cart-item-variant">{{ item.variant.title }}</p>
            {% endif %}
            
            <div class="gr-cart-item-price">
              {% if item.original_price != item.final_price %}
                <span class="gr-cart-item-price-sale">{{ item.final_price | money }}</span>
                <span class="gr-cart-item-price-compare">{{ item.original_price | money }}</span>
              {% else %}
                <span class="gr-cart-item-price-regular">{{ item.original_price | money }}</span>
              {% endif %}
            </div>
            
            <div class="gr-cart-item-quantity">
              <button class="gr-cart-item-quantity-minus" data-cart-item="{{ item.key }}" aria-label="Disminuir cantidad">-</button>
              <input type="number" name="updates[]" value="{{ item.quantity }}" min="1" aria-label="Cantidad" data-cart-item="{{ item.key }}">
              <button class="gr-cart-item-quantity-plus" data-cart-item="{{ item.key }}" aria-label="Aumentar cantidad">+</button>
            </div>
          </div>
          
          <button class="gr-cart-item-remove" data-cart-item="{{ item.key }}" aria-label="Eliminar">
            <svg xmlns="http  data-cart-item="{{ item.key }}" aria-label="Eliminar">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
      {% endfor %}
    </div>
    
    <div class="gr-cart-footer" {% if cart.item_count == 0 %}style="display: none;"{% endif %}>
      <div class="gr-cart-subtotal">
        <span>{{ section.settings.subtotal_text }}</span>
        <span class="gr-cart-subtotal-price">{{ cart.total_price | money }}</span>
      </div>
      
      {% if cart.cart_level_discount_applications.size > 0 %}
        <div class="gr-cart-discounts">
          {% for discount_application in cart.cart_level_discount_applications %}
            <div class="gr-cart-discount">
              <span class="gr-cart-discount-title">{{ discount_application.title }}</span>
              <span class="gr-cart-discount-amount">-{{ discount_application.total_allocated_amount | money }}</span>
            </div>
          {% endfor %}
        </div>
      {% endif %}
      
      <div class="gr-cart-note">
        <label for="gr-cart-note">{{ section.settings.note_label }}</label>
        <textarea id="gr-cart-note" name="note">{{ cart.note }}</textarea>
      </div>
      
      <div class="gr-cart-actions">
        <a href="{{ routes.cart_url }}" class="gr-button gr-button-secondary">{{ section.settings.view_cart_text }}</a>
        <a href="{{ routes.checkout_url }}" class="gr-button">{{ section.settings.checkout_text }}</a>
      </div>
      
      {% if section.settings.show_recommendations %}
        <div class="gr-cart-recommendations">
          <h3 class="gr-cart-recommendations-title">{{ section.settings.recommendations_title }}</h3>
          <div class="gr-cart-recommendations-items" id="gr-cart-recommendations">
            <!-- Las recomendaciones se cargarán aquí dinámicamente -->
          </div>
        </div>
      {% endif %}
    </div>
  </div>
</div>

<div class="gr-cart-overlay" id="gr-cart-overlay"></div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const cartButton = document.querySelector('.gr-cart-button');
    const cartContainer = document.getElementById('gr-cart-container');
    const cartOverlay = document.getElementById('gr-cart-overlay');
    const cartCloseButton = document.querySelector('.gr-cart-close');
    const cartItems = document.querySelector('.gr-cart-items');
    const cartEmpty = document.querySelector('.gr-cart-empty');
    const cartFooter = document.querySelector('.gr-cart-footer');
    const cartSubtotalPrice = document.querySelector('.gr-cart-subtotal-price');
    const cartNote = document.getElementById('gr-cart-note');
    
    // Función para abrir el carrito
    function openCart() {
      cartContainer.classList.add('active');
      cartOverlay.classList.add('active');
      document.body.style.overflow = 'hidden';
    }
    
    // Función para cerrar el carrito
    function closeCart() {
      cartContainer.classList.remove('active');
      cartOverlay.classList.remove('active');
      document.body.style.overflow = '';
    }
    
    // Event listeners para abrir/cerrar el carrito
    if (cartButton) {
      cartButton.addEventListener('click', function() {
        openCart();
      });
    }
    
    if (cartCloseButton) {
      cartCloseButton.addEventListener('click', function() {
        closeCart();
      });
    }
    
    if (cartOverlay) {
      cartOverlay.addEventListener('click', function() {
        closeCart();
      });
    }
    
    // Cerrar carrito al presionar Escape
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape' && cartContainer.classList.contains('active')) {
        closeCart();
      }
    });
    
    // Actualizar cantidad de productos
    const quantityInputs = document.querySelectorAll('.gr-cart-item-quantity input');
    const quantityMinusButtons = document.querySelectorAll('.gr-cart-item-quantity-minus');
    const quantityPlusButtons = document.querySelectorAll('.gr-cart-item-quantity-plus');
    const removeButtons = document.querySelectorAll('.gr-cart-item-remove');
    
    // Función para actualizar el carrito
    function updateCart(key, quantity) {
      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: key,
          quantity: quantity
        })
      })
      .then(response => response.json())
      .then(cart => {
        // Actualizar subtotal
        cartSubtotalPrice.textContent = formatMoney(cart.total_price);
        
        // Actualizar contador del carrito
        const cartCountElements = document.querySelectorAll('.gr-cart-count');
        cartCountElements.forEach(element => {
          element.textContent = cart.item_count;
        });
        
        // Mostrar/ocultar carrito vacío
        if (cart.item_count === 0) {
          cartItems.style.display = 'none';
          cartEmpty.style.display = 'block';
          cartFooter.style.display = 'none';
        } else {
          cartItems.style.display = 'block';
          cartEmpty.style.display = 'none';
          cartFooter.style.display = 'block';
        }
        
        // Si el elemento fue eliminado, quitarlo del DOM
        if (quantity === 0) {
          const cartItem = document.querySelector(`.gr-cart-item[data-cart-item="${key}"]`);
          if (cartItem) {
            cartItem.remove();
          }
        }
      })
      .catch(error => console.error('Error al actualizar el carrito:', error));
    }
    
    // Función para formatear precio
    function formatMoney(cents) {
      const moneyFormat = {{ shop.money_format | json }};
      const value = (cents / 100).toFixed(2);
      return moneyFormat.replace('{{amount}}', value);
    }
    
    // Event listeners para los botones de cantidad
    quantityInputs.forEach(input => {
      input.addEventListener('change', function() {
        const key = this.dataset.cartItem;
        const quantity = parseInt(this.value);
        
        if (quantity > 0) {
          updateCart(key, quantity);
        } else {
          this.value = 1;
        }
      });
    });
    
    quantityMinusButtons.forEach(button => {
      button.addEventListener('click', function() {
        const key = this.dataset.cartItem;
        const input = document.querySelector(`.gr-cart-item-quantity input[data-cart-item="${key}"]`);
        let quantity = parseInt(input.value) - 1;
        
        if (quantity < 1) {
          quantity = 1;
        }
        
        input.value = quantity;
        updateCart(key, quantity);
      });
    });
    
    quantityPlusButtons.forEach(button => {
      button.addEventListener('click', function() {
        const key = this.dataset.cartItem;
        const input = document.querySelector(`.gr-cart-item-quantity input[data-cart-item="${key}"]`);
        const quantity = parseInt(input.value) + 1;
        
        input.value = quantity;
        updateCart(key, quantity);
      });
    });
    
    // Event listeners para los botones de eliminar
    removeButtons.forEach(button => {
      button.addEventListener('click', function() {
        const key = this.dataset.cartItem;
        updateCart(key, 0);
      });
    });
    
    // Actualizar nota del carrito
    if (cartNote) {
      cartNote.addEventListener('change', function() {
        fetch('/cart/update.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            note: this.value
          })
        })
        .catch(error => console.error('Error al actualizar la nota del carrito:', error));
      });
    }
    
    // Cargar recomendaciones
    {% if section.settings.show_recommendations %}
      const cartRecommendations = document.getElementById('gr-cart-recommendations');
      
      if (cartRecommendations && window.granitoAPI) {
        // Obtener los IDs de los productos en el carrito
        const cartItems = {{ cart.items | json }};
        const cartItemIds = cartItems.map(item => item.product_id);
        
        // Obtener recomendaciones
        window.granitoAPI.getCartRecommendations(cartItemIds)
          .then(response => {
            if (!response.error && response.length > 0) {
              let recommendationsHTML = '';
              
              response.forEach(product => {
                recommendationsHTML += `
                  <div class="gr-cart-recommendation-item">
                    <a href="${product.url}" class="gr-cart-recommendation-link">
                      <div class="gr-cart-recommendation-image">
                        <img src="${product.image_url || '/placeholder.svg?height=100&width=100'}" alt="${product.title}">
                      </div>
                      <div class="gr-cart-recommendation-info">
                        <h4 class="gr-cart-recommendation-title">${product.title}</h4>
                        <div class="gr-cart-recommendation-price">${formatMoney(product.price * 100)}</div>
                      </div>
                    </a>
                    <button class="gr-cart-recommendation-add" data-product-id="${product.id}">+</button>
                  </div>
                `;
              });
              
              cartRecommendations.innerHTML = recommendationsHTML;
              
              // Event listeners para los botones de añadir recomendaciones
              const addButtons = cartRecommendations.querySelectorAll('.gr-cart-recommendation-add');
              
              addButtons.forEach(button => {
                button.addEventListener('click', function() {
                  const productId = this.dataset.productId;
                  
                  fetch('/cart/add.js', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      items: [{
                        id: productId,
                        quantity: 1
                      }]
                    })
                  })
                  .then(response => response.json())
                  .then(data => {
                    // Recargar el carrito
                    window.location.reload();
                  })
                  .catch(error => console.error('Error al añadir el producto:', error));
                });
              });
            }
          })
          .catch(error => console.error('Error al cargar recomendaciones:', error));
      }
    {% endif %}
  });
</script>

<style>
  .gr-cart {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    width: 350px;
    max-width: 100%;
    background-color: white;
    box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
    transform: translateX(100%);
    transition: transform 0.3s ease;
    z-index: 1000;
    display: flex;
    flex-direction: column;
  }
  
  .gr-cart.active {
    transform: translateX(0);
  }
  
  .gr-cart-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0s linear 0.3s;
    z-index: 999;
  }
  
  .gr-cart-overlay.active {
    opacity: 1;
    visibility: visible;
    transition: opacity 0.3s ease, visibility 0s linear 0s;
  }
  
  .gr-cart-header {
    padding: 15px;
    border-bottom: 1px solid #e5e5e5;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .gr-cart-title {
    margin: 0;
    font-size: 1.2em;
  }
  
  .gr-cart-close {
    background: none;
    border: none;
    padding: 5px;
    cursor: pointer;
    color: {{ section.settings.text_color }};
    transition: color 0.2s ease;
  }
  
  .gr-cart-close:hover {
    color: {{ settings.gr_color_principal }};
  }
  
  .gr-cart-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
  
  .gr-cart-empty {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 30px;
    text-align: center;
  }
  
  .gr-cart-empty-icon {
    margin-bottom: 20px;
    color: #ccc;
  }
  
  .gr-cart-empty-text {
    margin-bottom: 20px;
    color: #777;
  }
  
  .gr-button {
    display: inline-block;
    background-color: {{ settings.gr_color_principal }};
    color: white;
    padding: 10px 20px;
    border-radius: 4px;
    text-decoration: none;
    transition: background-color 0.2s ease;
    text-align: center;
  }
  
  .gr-button:hover {
    background-color: {{ settings.gr_color_secundario }};
  }
  
  .gr-button-secondary {
    background-color: transparent;
    border: 1px solid {{ settings.gr_color_principal }};
    color: {{ settings.gr_color_principal }};
  }
  
  .gr-button-secondary:hover {
    background-color: {{ settings.gr_color_principal }};
    color: white;
  }
  
  .gr-cart-items {
    flex: 1;
    overflow-y: auto;
    padding: 15px;
  }
  
  .gr-cart-item {
    display: flex;
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid #e5e5e5;
    position: relative;
  }
  
  .gr-cart-item:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
    border-bottom: none;
  }
  
  .gr-cart-item-image {
    width: 80px;
    height: 80px;
    margin-right: 15px;
  }
  
  .gr-cart-item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
  }
  
  .gr-cart-item-details {
    flex: 1;
  }
  
  .gr-cart-item-title {
    margin: 0 0 5px;
    font-size: 1em;
    padding-right: 25px;
  }
  
  .gr-cart-item-title a {
    text-decoration: none;
    color: {{ section.settings.text_color }};
  }
  
  .gr-cart-item-variant {
    margin: 0 0 5px;
    font-size: 0.9em;
    color: #777;
  }
  
  .gr-cart-item-price {
    margin-bottom: 10px;
  }
  
  .gr-cart-item-price-sale {
    color: #e53935;
    font-weight: bold;
    margin-right: 5px;
  }
  
  .gr-cart-item-price-compare {
    text-decoration: line-through;
    color: #777;
    font-size: 0.9em;
  }
  
  .gr-cart-item-price-regular {
    font-weight: bold;
  }
  
  .gr-cart-item-quantity {
    display: flex;
    align-items: center;
    max-width: 100px;
  }
  
  .gr-cart-item-quantity button {
    width: 30px;
    height: 30px;
    background-color: #f5f5f5;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2em;
    transition: background-color 0.2s ease;
  }
  
  .gr-cart-item-quantity button:hover {
    background-color: #e5e5e5;
  }
  
  .gr-cart-item-quantity input {
    width: 40px;
    height: 30px;
    border: 1px solid #e5e5e5;
    border-radius: 4px;
    text-align: center;
    margin: 0 5px;
  }
  
  .gr-cart-item-remove {
    position: absolute;
    top: 0;
    right: 0;
    background: none;
    border: none;
    padding: 5px;
    cursor: pointer;
    color: #777;
    transition: color 0.2s ease;
  }
  
  .gr-cart-item-remove:hover {
    color: #e53935;
  }
  
  .gr-cart-footer {
    padding: 15px;
    border-top: 1px solid #e5e5e5;
  }
  
  .gr-cart-subtotal {
    display: flex;
    justify-content: space-between;
    margin-bottom: 15px;
    font-weight: bold;
  }
  
  .gr-cart-discounts {
    margin-bottom: 15px;
  }
  
  .gr-cart-discount {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
    font-size: 0.9em;
    color: #4caf50;
  }
  
  .gr-cart-note {
    margin-bottom: 15px;
  }
  
  .gr-cart-note label {
    display: block;
    margin-bottom: 5px;
    font-size: 0.9em;
  }
  
  .gr-cart-note textarea {
    width: 100%;
    height: 60px;
    padding: 8px;
    border: 1px solid #e5e5e5;
    border-radius: 4px;
    resize: none;
  }
  
  .gr-cart-actions {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
  }
  
  .gr-cart-actions a {
    flex: 1;
  }
  
  .gr-cart-recommendations {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #e5e5e5;
  }
  
  .gr-cart-recommendations-title {
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 1em;
  }
  
  .gr-cart-recommendations-items {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 10px;
  }
  
  .gr-cart-recommendation-item {
    position: relative;
    border: 1px solid #e5e5e5;
    border-radius: 4px;
    overflow: hidden;
  }
  
  .gr-cart-recommendation-link {
    display: block;
    text-decoration: none;
    color: {{ section.settings.text_color }};
    padding: 10px;
  }
  
  .gr-cart-recommendation-image {
    width: 100%;
    height: 80px;
    margin-bottom: 10px;
  }
  
  .gr-cart-recommendation-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
  }
  
  .gr-cart-recommendation-info {
    text-align: center;
  }
  
  .gr-cart-recommendation-title {
    margin: 0 0 5px;
    font-size: 0.9em;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .gr-cart-recommendation-price {
    font-size: 0.9em;
    font-weight: bold;
  }
  
  .gr-cart-recommendation-add {
    position: absolute;
    top: 5px;
    right: 5px;
    width: 24px;
    height: 24px;
    background-color: {{ settings.gr_color_principal }};
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2em;
    transition: background-color 0.2s ease;
  }
  
  .gr-cart-recommendation-add:hover {
    background-color: {{ settings.gr_color_secundario }};
  }
</style>

{% schema %}
{
  "name": "GR Carrito",
  "tag": "section",
  "class": "section-cart",
  "settings": [
    {
      "type": "header",
      "content": "Configuración general"
    },
    {
      "type": "text",
      "id": "cart_title",
      "label": "Título del carrito",
      "default": "Tu carrito"
    },
    {
      "type": "text",
      "id": "empty_text",
      "label": "Texto de carrito vacío",
      "default": "Tu carrito está vacío"
    },
    {
      "type": "text",
      "id": "continue_text",
      "label": "Texto del botón continuar",
      "default": "Continuar comprando"
    },
    {
      "type": "url",
      "id": "continue_url",
      "label": "URL del botón continuar",
      "default": "/collections/all"
    },
    {
      "type": "text",
      "id": "subtotal_text",
      "label": "Texto del subtotal",
      "default": "Subtotal:"
    },
    {
      "type": "text",
      "id": "note_label",
      "label": "Etiqueta de la nota",
      "default": "Nota:"
    },
    {
      "type": "text",
      "id": "view_cart_text",
      "label": "Texto del botón ver carrito",
      "default": "Ver carrito"
    },
    {
      "type": "text",
      "id": "checkout_text",
      "label": "Texto del botón finalizar compra",
      "default": "Finalizar compra"
    },
    {
      "type": "header",
      "content": "Recomendaciones"
    },
    {
      "type": "checkbox",
      "id": "show_recommendations",
      "label": "Mostrar recomendaciones",
      "default": true
    },
    {
      "type": "text",
      "id": "recommendations_title",
      "label": "Título de recomendaciones",
      "default": "También te puede interesar"
    },
    {
      "type": "header",
      "content": "Colores"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Color del texto",
      "default": "#333333"
    }
  ],
  "presets": [
    {
      "name": "GR Carrito"
    }
  ]
}
{% endschema %}
