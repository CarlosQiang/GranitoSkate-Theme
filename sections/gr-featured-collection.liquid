{% comment %}
  @name: GR Colección Destacada
  @description: Muestra productos de una colección seleccionada
  @author: v0
{% endcomment %}

<div class="gr-featured-collection page-width">
  <div class="section-header text-center">
    <h2 class="h2">{{ section.settings.title | escape }}</h2>
    {% if section.settings.description != blank %}
      <div class="rte">{{ section.settings.description }}</div>
    {% endif %}
  </div>

  {%- assign collection = collections[section.settings.collection] -%}
  
  {% if collection == empty %}
    <div class="grid grid--uniform grid--view-items">
      {% for i in (1..section.settings.products_to_show) %}
        <div class="grid__item small--one-half medium-up--one-quarter">
          <div class="grid-view-item product-card">
            <div class="grid-view-item__image-container">
              {% capture current %}{% cycle 1, 2, 3, 4, 5, 6 %}{% endcapture %}
              {{ 'product-' | append: current | placeholder_svg_tag: 'placeholder-svg' }}
            </div>
            <div class="h4 grid-view-item__title product-card__title">{{ 'homepage.onboarding.product_title' | t }}</div>
            <div class="grid-view-item__meta">
              <span class="product-price__price">$19.99</span>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  {% else %}
    {% if collection.products.size > 0 %}
      <div class="gr-products-grid">
        {% for product in collection.products limit: section.settings.products_to_show %}
          <div class="gr-product-card">
            <a href="{{ product.url | within: collection }}" class="gr-product-card__link">
              <div class="gr-product-card__image-wrapper">
                {% if product.featured_image != blank %}
                  <img 
                    class="gr-product-card__image lazyload"
                    data-src="{{ product.featured_image | img_url: '450x450', crop: 'center' }}"
                    data-widths="[180, 360, 540, 720, 900, 1080, 1296]"
                    data-aspectratio="{{ product.featured_image.aspect_ratio }}"
                    data-sizes="auto"
                    alt="{{ product.featured_image.alt | escape }}"
                    width="450"
                    height="450"
                    loading="lazy"
                  >
                  <noscript>
                    <img 
                      class="gr-product-card__image" 
                      src="{{ product.featured_image | img_url: '450x450', crop: 'center' }}" 
                      alt="{{ product.featured_image.alt | escape }}"
                    >
                  </noscript>
                {% else %}
                  {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
                {% endif %}
                
                {% if section.settings.show_secondary_image and product.images[1] != blank %}
                  <div class="gr-product-card__image-hover">
                    <img 
                      class="lazyload"
                      data-src="{{ product.images[1] | img_url: '450x450', crop: 'center' }}"
                      data-widths="[180, 360, 540, 720, 900, 1080, 1296]"
                      data-aspectratio="{{ product.images[1].aspect_ratio }}"
                      data-sizes="auto"
                      alt="{{ product.images[1].alt | escape }}"
                      width="450"
                      height="450"
                      loading="lazy"
                    >
                  </div>
                {% endif %}
              </div>

              <div class="gr-product-card__info">
                <h3 class="gr-product-card__title">{{ product.title }}</h3>
                
                <div class="gr-product-card__price">
                  {% if product.compare_at_price > product.price %}
                    <span class="gr-product-card__price--sale">{{ product.price | money }}</span>
                    <span class="gr-product-card__price--compare">{{ product.compare_at_price | money }}</span>
                  {% else %}
                    <span class="gr-product-card__price--regular">{{ product.price | money }}</span>
                  {% endif %}
                </div>
                
                {% if section.settings.show_vendor %}
                  <div class="gr-product-card__vendor">{{ product.vendor }}</div>
                {% endif %}
              </div>
            </a>
            
            {% if section.settings.show_quick_add %}
              <div class="gr-product-card__actions">
                <form method="post" action="/cart/add" class="gr-quick-add-form">
                  <input type="hidden" name="id" value="{{ product.variants.first.id }}">
                  <input type="hidden" name="quantity" value="1">
                  <button type="submit" class="gr-quick-add-button" {% if product.available == false %}disabled{% endif %}>
                    {% if product.available %}
                      {{ 'products.product.add_to_cart' | t }}
                    {% else %}
                      {{ 'products.product.sold_out' | t }}
                    {% endif %}
                  </button>
                </form>
              </div>
            {% endif %}
          </div>
        {% endfor %}
      </div>
      
      {% if section.settings.show_view_all and section.settings.collection != blank %}
        <div class="gr-view-all">
          <a href="{{ collection.url }}" class="btn">
            {{ 'collections.general.view_all' | t }}
          </a>
        </div>
      {% endif %}
    {% else %}
      <div class="gr-empty-collection">
        <p>{{ 'collections.general.no_matches' | t }}</p>
      </div>
    {% endif %}
  {% endif %}
</div>

<style>
  .gr-featured-collection {
    margin-bottom: 60px;
  }
  
  .gr-products-grid {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    gap: 20px;
    margin-top: 30px;
  }
  
  @media screen and (min-width: 550px) {
    .gr-products-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media screen and (min-width: 750px) {
    .gr-products-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  @media screen and (min-width: 990px) {
    .gr-products-grid {
      grid-template-columns: repeat({{ section.settings.products_per_row }}, 1fr);
    }
  }
  
  .gr-product-card {
    position: relative;
    display: flex;
    flex-direction: column;
    height: 100%;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .gr-product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }
  
  .gr-product-card__link {
    display: flex;
    flex-direction: column;
    height: 100%;
    text-decoration: none;
    color: inherit;
  }
  
  .gr-product-card__image-wrapper {
    position: relative;
    padding-bottom: 100%;
    overflow: hidden;
    background-color: #f5f5f5;
  }
  
  .gr-product-card__image,
  .gr-product-card__image-hover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease;
  }
  
  .gr-product-card__image-hover {
    opacity: 0;
  }
  
  .gr-product-card:hover .gr-product-card__image {
    opacity: 0;
  }
  
  .gr-product-card:hover .gr-product-card__image-hover {
    opacity: 1;
  }
  
  .gr-product-card__info {
    padding: 15px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }
  
  .gr-product-card__title {
    font-size: 16px;
    margin: 0 0 10px;
    font-weight: 500;
  }
  
  .gr-product-card__price {
    margin-bottom: 5px;
    font-weight: 700;
  }
  
  .gr-product-card__price--sale {
    color: #e32c2b;
    margin-right: 8px;
  }
  
  .gr-product-card__price--compare {
    text-decoration: line-through;
    opacity: 0.7;
    font-weight: 400;
  }
  
  .gr-product-card__vendor {
    font-size: 14px;
    opacity: 0.7;
    margin-top: auto;
  }
  
  .gr-product-card__actions {
    padding: 0 15px 15px;
  }
  
  .gr-quick-add-button {
    width: 100%;
    padding: 10px;
    background-color: {{ section.settings.button_color }};
    color: {{ section.settings.button_text_color }};
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 600;
    transition: background-color 0.3s ease;
  }
  
  .gr-quick-add-button:hover {
    background-color: {{ section.settings.button_color | color_darken: 10 }};
  }
  
  .gr-quick-add-button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }
  
  .gr-view-all {
    margin-top: 30px;
    text-align: center;
  }
  
  .gr-empty-collection {
    text-align: center;
    padding: 40px 0;
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Quick view functionality
  const quickViewButtons = document.querySelectorAll('.quick-view-button');
  
  quickViewButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      const productUrl = this.getAttribute('data-product-url');
      
      // Create modal
      const modal = document.createElement('div');
      modal.className = 'quick-view-modal';
      modal.innerHTML = `
        <div class="quick-view-overlay"></div>
        <div class="quick-view-content">
          <button type="button" class="quick-view-close">×</button>
          <div class="quick-view-body">
            <div class="quick-view-loading">Cargando...</div>
          </div>
        </div>
      `;
      
      document.body.appendChild(modal);
      document.body.style.overflow = 'hidden';
      
      // Close modal on click outside or close button
      const overlay = modal.querySelector('.quick-view-overlay');
      const closeButton = modal.querySelector('.quick-view-close');
      
      overlay.addEventListener('click', closeModal);
      closeButton.addEventListener('click', closeModal);
      
      function closeModal() {
        document.body.removeChild(modal);
        document.body.style.overflow = '';
      }
      
      // Fetch product content
      fetch(productUrl)
        .then(response => response.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const productContent = doc.querySelector('.quick-view-content');
          
          if (productContent) {
            modal.querySelector('.quick-view-body').innerHTML = productContent.innerHTML;
            
            // Initialize any necessary functionality in the quick view
            const form = modal.querySelector('form[action="/cart/add"]');
            if (form) {
              form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(form);
                
                fetch('/cart/add.js', {
                  method: 'POST',
                  body: formData
                })
                .then(response => response.json())
                .then(data => {
                  // Show success message
                  const successMessage = document.createElement('div');
                  successMessage.className = 'quick-view-success';
                  successMessage.textContent = 'Producto añadido al carrito';
                  modal.querySelector('.quick-view-body').appendChild(successMessage);
                  
                  // Close modal after delay
                  setTimeout(() => {
                    closeModal();
                    // Refresh cart count if needed
                    // You might want to implement a cart refresh function here
                  }, 2000);
                })
                .catch(error => {
                  console.error('Error:', error);
                });
              });
            }
          } else {
            modal.querySelector('.quick-view-body').innerHTML = '<p>Error al cargar el producto</p>';
          }
        })
        .catch(error => {
          console.error('Error:', error);
          modal.querySelector('.quick-view-body').innerHTML = '<p>Error al cargar el producto</p>';
        });
    });
  });
  
  // Add to cart functionality
  const addToCartForms = document.querySelectorAll('.product-form');
  
  addToCartForms.forEach(form => {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const submitButton = form.querySelector('button[type="submit"]');
      const originalText = submitButton.textContent;
      submitButton.textContent = 'Añadiendo...';
      submitButton.disabled = true;
      
      const formData = new FormData(form);
      
      fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        // Show success message
        submitButton.textContent = '¡Añadido!';
        
        // Reset button after delay
        setTimeout(() => {
          submitButton.textContent = originalText;
          submitButton.disabled = false;
          
          // Refresh cart count if needed
          // You might want to implement a cart refresh function here
        }, 2000);
      })
      .catch(error => {
        console.error('Error:', error);
        submitButton.textContent = 'Error';
        
        // Reset button after delay
        setTimeout(() => {
          submitButton.textContent = originalText;
          submitButton.disabled = false;
        }, 2000);
      });
    });
  });
  
  // Slider functionality if enabled
  const slider = document.querySelector('.featured-collection-slider');
  
  if (slider && slider.getAttribute('data-slider') === 'true') {
    // Simple slider implementation
    const productCards = slider.querySelectorAll('.product-card-wrapper');
    const productsPerRow = parseInt(slider.getAttribute('data-products-per-row')) || 4;
    
    if (productCards.length > productsPerRow) {
      // Create navigation buttons
      const prevButton = document.createElement('button');
      prevButton.className = 'slider-nav slider-nav--prev';
      prevButton.innerHTML = '&lt;';
      prevButton.setAttribute('aria-label', 'Previous products');
      
      const nextButton = document.createElement('button');
      nextButton.className = 'slider-nav slider-nav--next';
      nextButton.innerHTML = '&gt;';
      nextButton.setAttribute('aria-label', 'Next products');
      
      // Add buttons to DOM
      slider.parentNode.insertBefore(prevButton, slider);
      slider.parentNode.insertBefore(nextButton, slider.nextSibling);
      
      // Add slider container
      const sliderContainer = document.createElement('div');
      sliderContainer.className = 'slider-container';
      slider.parentNode.insertBefore(sliderContainer, slider);
      sliderContainer.appendChild(slider);
      
      // Set up slider
      let currentPosition = 0;
      const totalSlides = Math.ceil(productCards.length / productsPerRow);
      
      // Update slider position
      function updateSliderPosition() {
        slider.style.transform = `translateX(-${currentPosition * 100}%)`;
        
        // Update button states
        prevButton.disabled = currentPosition === 0;
        nextButton.disabled = currentPosition === totalSlides - 1;
      }
      
      // Add event listeners
      prevButton.addEventListener('click', () => {
        if (currentPosition > 0) {
          currentPosition--;
          updateSliderPosition();
        }
      });
      
      nextButton.addEventListener('click', () => {
        if (currentPosition < totalSlides - 1) {
          currentPosition++;
          updateSliderPosition();
        }
      });
      
      // Initialize slider
      updateSliderPosition();
      
      // Add slider styles
      const style = document.createElement('style');
      style.textContent = `
        .slider-container {
          position: relative;
          overflow: hidden;
        }
        
        .featured-collection-slider {
          display: flex;
          transition: transform 0.5s ease;
        }
        
        .product-card-wrapper {
          flex: 0 0 calc(100% / ${productsPerRow});
        }
        
        .slider-nav {
          position: absolute;
          top: 50%;
          transform: translateY(-50%);
          width: 40px;
          height: 40px;
          background-color: white;
          border: 1px solid #e5e5e5;
          border-radius: 50%;
          font-size: 18px;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          z-index: 2;
          transition: background-color 0.3s ease;
        }
        
        .slider-nav:hover {
          background-color: #f5f5f5;
        }
        
        .slider-nav:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
        
        .slider-nav--prev {
          left: -20px;
        }
        
        .slider-nav--next {
          right: -20px;
        }
        
        @media screen and (max-width: 749px) {
          .product-card-wrapper {
            flex: 0 0 calc(100% / 2);
          }
        }
      `;
      
      document.head.appendChild(style);
    }
  }
});
</script>

<style>
/* Quick view modal styles */
.quick-view-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;
  display: flex;
  align-items: center;
  justify-content: center;
}

.quick-view-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
}

.quick-view-content {
  position: relative;
  width: 90%;
  max-width: 1000px;
  max-height: 90vh;
  background-color: #fff;
  border-radius: 8px;
  overflow-y: auto;
  z-index: 1;
}

.quick-view-close {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 24px;
  line-height: 1;
  cursor: pointer;
  z-index: 2;
}

.quick-view-body {
  padding: 20px;
  position: relative;
}

.quick-view-loading {
  text-align: center;
  padding: 40px;
}

.quick-view-success {
  position: absolute;
  bottom: 20px;
  left: 0;
  right: 0;
  background-color: #4CAF50;
  color: white;
  padding: 10px;
  text-align: center;
  border-radius: 4px;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}
</style>

{% schema %}
{
  "name": "Colección destacada",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Título",
      "default": "Productos destacados"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Descripción"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Colección"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 12,
      "step": 1,
      "default": 4,
      "label": "Productos a mostrar"
    },
    {
      "type": "range",
      "id": "products_per_row",
      "min": 2,
      "max": 5,
      "step": 1,
      "default": 4,
      "label": "Productos por fila"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Mostrar vendedor",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "label": "Mostrar segunda imagen al pasar el cursor",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_quick_add",
      "label": "Mostrar botón de añadir rápido",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "Mostrar botón 'Ver todo'",
      "default": true
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Color del botón",
      "default": "#d29a43"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Color del texto del botón",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "Colección destacada",
      "category": "Granito"
    }
  ]
}
{% endschema %}
